@model ColorViewModel
@{
    ViewData["Title"] = "Color " + @Model.HexColor;
    ViewData["ActivePage"] = "color";
}

@section CssRootColors {

    <style>
        :root {
            --color-branding-text: #ffffff;
            --color-branding-background: #@Model.HexColor;
            --color-branding-active-background: #@Model.Square1HexColor;
        }
    </style>
}

<div class="row">
    <div class="column">
        @*<d:last-childv class="box" style="background-color: #@Model.HexColor;"></div>*@
        <h1 style="color: #@Model.HexColor;">Color #@Model.HexColor</h1>
    </div>
</div>

<div class="row">
    <div class="column">
        <h3>Color Space</h3>
        <table>
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Hex</td>
                    <td>#@Model.HexColor</td>
                </tr>
                <tr>
                    <td>RGB</td>
                    <td>@Model.RgbColorString</td>
                </tr>
                <tr>
                    <td>HSL</td>
                    <td>@Html.Raw(Model.HslColorString)</td>
                </tr>
                <tr>
                    <td>HSV</td>
                    <td>@Html.Raw(Model.HsvColorString)</td>
                </tr>
            </tbody>
        </table>    
    </div>
    <div class="column">
        <h3>Base Numbers</h3>
        <table>
            <thead>
                <tr>
                    <th>Base</th>
                    <th>Red</th>
                    <th>Green</th>
                    <th>Blue</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Binary</td>
                    <td>@Model.BinaryR</td>
                    <td>@Model.BinaryG</td>
                    <td>@Model.BinaryB</td>
                </tr>
                <tr>
                    <td>Octal</td>
                    <td>@Model.OctalR</td>
                    <td>@Model.OctalG</td>
                    <td>@Model.OctalB</td>
                </tr>
                <tr>
                    <td>Decimal</td>
                    <td>@Model.DecimalR</td>
                    <td>@Model.DecimalG</td>
                    <td>@Model.DecimalB</td>
                </tr>
                <tr>
                    <td>Hex</td>
                    <td>@Model.HexR</td>
                    <td>@Model.HexG</td>
                    <td>@Model.HexB</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="row">
    <div class="column">
        <h3>Complementary</h3>
        @{await RenderColorSwatch(Model.HexColor, Model.ComplementaryHexColor);}
    </div>
    <div class="column">
        <h3>Triadic</h3>
        @{await RenderColorSwatch(Model.HexColor, Model.Triadic0HexColor, Model.Triadic1HexColor);}
    </div>
    <div class="column">
        <h3>Analagous</h3>
        @{await RenderColorSwatch(Model.HexColor, Model.Analagous0HexColor, Model.Analagous1HexColor);}
    </div>
</div>

<div class="row">
    <div class="column">
        <h3>Tetradic</h3>
        @{await RenderColorSwatch(Model.HexColor, Model.Tetradic0HexColor, Model.Tetradic1HexColor, Model.Tetradic2HexColor);}
    </div>
    <div class="column">
        <h3>Square</h3>
        @{await RenderColorSwatch(Model.HexColor, Model.Square0HexColor, Model.Square1HexColor, Model.Square2HexColor);}
    </div>
</div>

<div class="row">
    <div class="column">
        <h3>Shades</h3>
        @{await RenderColorSwatch(Model.Shades);}
    </div>
</div>

<div class="row">
    <div class="column">
        <h3>Tints</h3>
        @{await RenderColorSwatch(Model.Tints);}
    </div>
</div>

<div class="row">
    <div class="column">
        <h3>On Black</h3>
        <div class="background-preview" style="background-color: black; border: 1px solid black;">
            <div style="background-color: #@Model.HexColor;"></div>
            <div style="color: #@Model.HexColor;">Lorem ipsum</div>
        </div>
    </div>
    <div class="column">
        <h3>On White</h3>
        <div class="background-preview" style="background-color: white; border: 1px solid black;">
            <div style="background-color: #@Model.HexColor;"></div>
            <div style="color: #@Model.HexColor;">Lorem ipsum</div>
        </div>
    </div>
</div>

<div class="row">
    <div class="column">
        <h3>Text</h3>
        <div class="example-box" style="color: #@Model.HexColor;">Lorem ipsum dolar sit amet</div>
        <pre style="border-left-color: #@Model.HexColor;"><code>.color {
    color: #@Model.HexColor;
}

&lt;div class=&quot;color&quot;&gt;
    Lorem ipsum dolar sit amet
&lt;/div&gt;</code></pre>
    </div>
    <div class="column">
        <h3>Background</h3>
        <div class="example-box" style="color: #@Model.ComplementaryHexColor;background-color: #@Model.HexColor;">Lorem ipsum dolar sit amet</div>
        <pre style="border-left-color: #@Model.HexColor;"><code>.background-color {
    background-color: #@Model.HexColor;
}

&lt;div class=&quot;background-color&quot;&gt;
    Lorem ipsum dolar sit amet
&lt;/div&gt;</code></pre>
    </div>
</div>

<div class="row">
    <div class="column">
        <h3>Border</h3>
        <div class="example-box" style="color: #@Model.HexColor;border: 1px solid #@Model.HexColor;">Lorem ipsum dolar sit amet</div>
 
        <pre style="border-left-color: #@Model.HexColor;"><code>.border {
    border: 1px solid #@Model.HexColor;
}

&lt;div class=&quot;border&quot;&gt;
    Lorem ipsum dolar sit amet
&lt;/div&gt;</code></pre>
    </div>
    <div class="column">
        <h3>Box Shadow</h3>
        <div class="example-box" style="color: #@Model.HexColor;box-shadow: 1px 1px 3px 2px #@Model.HexColor;">Lorem ipsum dolar sit amet</div>
        <pre style="border-left-color: #@Model.HexColor;"><code>.box-shadow {
    box-shadow: 1px 1px 3px 2px #@Model.HexColor;
}

&lt;div class=&quot;box-shadow&quot;&gt;
    Lorem ipsum dolar sit amet
&lt;/div&gt;</code></pre>
    </div>
</div>

@functions {
    async Task RenderColorSwatch(params string[] colors)
    {
        <ul class="color-swatch">
        @foreach (var color in colors)
        {
            await RenderColorLink(color);
        }
        </ul>
    }

    // Keep the li elements right next to the curly braces or it will add in an extra space causing ui issues
    async Task RenderColorLink(string hexColor)
    {<li style="color: #@hexColor;background-color: #@hexColor;">
        <a asp-area="" asp-controller="Color" asp-action="Index" asp-route-colorHex="@hexColor"><span>#@hexColor</span></a>
    </li>}
}